"""
Handlers del Bot de Autocaravana
"""
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler
from datetime import datetime
from typing import Dict, Any
from database import db

from config import config

# Estados para las conversaciones
ASKING_LOCATION = 1
ASKING_KILOMETERS = 2
ASKING_MAINTENANCE_TYPE = 3
ASKING_MAINTENANCE_DESCRIPTION = 4
ASKING_MAINTENANCE_COST = 5
ASKING_FUEL_AMOUNT = 6
ASKING_FUEL_PRICE = 7

# Emojis y textos
STATUS_EMOJIS = {
    'travel': 'üöó',
    'parking': 'üÖøÔ∏è', 
    'vacation_home': 'üè†'
}

STATUS_NAMES = {
    'travel': 'De viaje',
    'parking': 'En parking',
    'vacation_home': 'En casa de vacaciones'
}

MAINTENANCE_TYPES = {
    'repair': 'üîß Reparaci√≥n',
    'improvement': '‚ö° Mejora',
    'maintenance': 'üõ†Ô∏è Mantenimiento'
}

def get_main_menu_keyboard() -> InlineKeyboardMarkup:
    """Retorna el teclado del men√∫ principal"""
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üìÖ Registro Diario", callback_data="daily_record"),
            InlineKeyboardButton("üõ£Ô∏è Kilometraje", callback_data="kilometers")
        ],
        [
            InlineKeyboardButton("üîß Mantenimiento", callback_data="maintenance"),
            InlineKeyboardButton("‚õΩ Repostajes", callback_data="fuel")
        ],
        [
            InlineKeyboardButton("üìä Estad√≠sticas", callback_data="stats")
        ],
        [
            InlineKeyboardButton("‚ùì Ayuda", callback_data="help")
        ]
    ])

def get_daily_status_keyboard() -> InlineKeyboardMarkup:
    """Retorna el teclado para seleccionar estado diario"""
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üöó De viaje", callback_data="status_travel"),
            InlineKeyboardButton("üÖøÔ∏è En parking", callback_data="status_parking")
        ],
        [
            InlineKeyboardButton("üè† Casa vacaciones", callback_data="status_vacation_home")
        ],
        [
            InlineKeyboardButton("üîô Volver", callback_data="main_menu")
        ]
    ])

def get_stats_keyboard() -> InlineKeyboardMarkup:
    """Retorna el teclado de estad√≠sticas SOLO con listados"""
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üìç Registros de ubicaci√≥n", callback_data="stats_list_daily"),
        ],
        [
            InlineKeyboardButton("üõ£Ô∏è Kilometraje", callback_data="stats_list_km"),
        ],
        [
            InlineKeyboardButton("üîß Mantenimiento", callback_data="stats_list_maintenance"),
        ],
        [
            InlineKeyboardButton("‚õΩ Repostajes", callback_data="stats_list_fuel"),
        ],
        [
            InlineKeyboardButton("üîô Volver", callback_data="main_menu")
        ]
    ])

def get_maintenance_type_keyboard() -> InlineKeyboardMarkup:
    """Retorna el teclado para tipos de mantenimiento"""
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üîß Reparaci√≥n", callback_data="maintenance_repair"),
            InlineKeyboardButton("‚ö° Mejora", callback_data="maintenance_improvement")
        ],
        [
            InlineKeyboardButton("üõ†Ô∏è Mantenimiento", callback_data="maintenance_maintenance")
        ],
        [
            InlineKeyboardButton("üîô Volver", callback_data="main_menu")
        ]
    ])

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Comando /start - Reiniciar bot"""
    user = update.effective_user
    
    # Configurar chat_id para el scheduler
    from main import daily_scheduler
    if daily_scheduler:
        daily_scheduler.set_chat_id(update.effective_chat.id)
        print(f"‚úÖ Chat ID configurado para recordatorios: {update.effective_chat.id}")
    
    welcome_text = f"""
üöê ¬°Hola {user.first_name}!

**Bot de Autocaravana** reiniciado correctamente ‚úÖ

El bot est√° listo para usar. Usa /menu para ver el men√∫ principal.

¬øNecesitas ayuda? Usa /help
"""
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=get_main_menu_keyboard()
    )

async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Comando /menu - Men√∫ principal"""
    user = update.effective_user
    
    # Configurar chat_id para el scheduler
    from main import daily_scheduler
    if daily_scheduler:
        daily_scheduler.set_chat_id(update.effective_chat.id)
        print(f"‚úÖ Chat ID configurado para recordatorios: {update.effective_chat.id}")
    
    menu_text = f"""
üöê **Bot de Autocaravana** üèïÔ∏è

¬°Hola {user.first_name}! ¬øQu√© quieres hacer hoy?

Este bot te ayudar√° a:
‚Ä¢ üìç Registrar la ubicaci√≥n diaria de tu autocaravana
‚Ä¢ üìä Ver estad√≠sticas de uso
‚Ä¢ üõ£Ô∏è Controlar el kilometraje
‚Ä¢ üîß Gestionar mantenimientos
‚Ä¢ ‚õΩ Registrar repostajes
"""
    
    await update.message.reply_text(
        menu_text,
        reply_markup=get_main_menu_keyboard()
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Comando /help - Ayuda"""
    help_text = """
üìö **Ayuda del Bot de Autocaravana**

**Comandos disponibles:**
‚Ä¢ `/menu` - Men√∫ principal
‚Ä¢ `/start` - Reiniciar bot
‚Ä¢ `/daily` - Registro manual del estado diario
‚Ä¢ `/km` - Registrar kilometraje
‚Ä¢ `/maintenance` - Registrar mantenimiento
‚Ä¢ `/fuel` - Registrar repostaje
‚Ä¢ `/stats` - Ver estad√≠sticas
‚Ä¢ `/help` - Esta ayuda

**Funcionalidades:**
‚Ä¢ üìÖ **Registro autom√°tico**: Todos los d√≠as a las 09:00 AM te preguntar√° d√≥nde est√° la autocaravana
‚Ä¢ üìä **Estad√≠sticas**: Listas de todos los registros
‚Ä¢ üõ£Ô∏è **Kilometraje**: Control del od√≥metro total
‚Ä¢ üîß **Mantenimiento**: Registro de reparaciones y mejoras con costes
‚Ä¢ ‚õΩ **Repostajes**: Registro de combustible con importe y precio por litro

**Estados de la autocaravana:**
‚Ä¢ üöó **De viaje** - Registra ubicaci√≥n por texto
‚Ä¢ üÖøÔ∏è **En parking** - La autocaravana est√° en un parking
‚Ä¢ üè† **Casa vacaciones** - La autocaravana est√° en una casa de vacaciones

¬øNecesitas ayuda con algo espec√≠fico?
"""
    
    await update.message.reply_text(
        help_text,
        reply_markup=get_main_menu_keyboard()
    )

async def daily_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Comando /daily - Registro manual del estado diario"""
    await update.message.reply_text(
        "üìÖ **Registro Diario**\n\n¬øD√≥nde est√° la autocaravana hoy?",
        reply_markup=get_daily_status_keyboard()
    )

async def km_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Comando /km - Registrar kilometraje"""
    # Determinar si es un comando o un callback
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(
            "üõ£Ô∏è **Registrar Kilometraje**\n\nPor favor, introduce el n√∫mero de kil√≥metros:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô Volver", callback_data="kilometers")]
            ])
        )
    else:
        await update.message.reply_text(
            "üõ£Ô∏è **Registrar Kilometraje**\n\nPor favor, introduce el n√∫mero de kil√≥metros:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô Volver", callback_data="kilometers")]
            ])
        )
    return ASKING_KILOMETERS

async def add_kilometers_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Callback para a√±adir kilometraje desde el men√∫"""
    return await km_command(update, context)

async def maintenance_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Comando /maintenance - Registrar mantenimiento"""
    await update.message.reply_text(
        "üîß **Registro de Mantenimiento**\n\n¬øQu√© tipo de registro quieres a√±adir?",
        reply_markup=get_maintenance_type_keyboard()
    )

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Comando /stats - Ver estad√≠sticas"""
    # Determinar si es un comando o un callback
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(
            "üìä **Estad√≠sticas**\n\n¬øQu√© estad√≠sticas quieres ver?",
            reply_markup=get_stats_keyboard()
        )
    else:
        await update.message.reply_text(
            "üìä **Estad√≠sticas**\n\n¬øQu√© estad√≠sticas quieres ver?",
            reply_markup=get_stats_keyboard()
        )

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Maneja todos los callbacks de botones"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data == "main_menu":
        await show_main_menu(query)
    elif data == "daily_record":
        await show_daily_status_menu(query)
    elif data.startswith("status_"):
        await handle_status_selection(query, context, data.replace("status_", ""))
    elif data == "kilometers":
        await show_kilometers_menu(query)
    elif data == "maintenance":
        await show_maintenance_menu(query)
    elif data == "fuel":
        await show_fuel_menu(query)
    elif data == "stats":
        await show_stats_menu(query)
    elif data.startswith("stats_"):
        await handle_stats_selection(query, data.replace("stats_", ""))
    elif data == "add_maintenance":
        # Este callback ser√° manejado por el ConversationHandler
        pass
    elif data == "add_location":
        # Este callback ser√° manejado por el ConversationHandler
        pass
    elif data == "add_fuel":
        # Este callback ser√° manejado por el ConversationHandler
        pass
    elif data == "add_kilometers":
        # Este callback ser√° manejado por el ConversationHandler
        pass
    elif data == "list_fuel":
        await show_fuel_list(query)
    elif data.startswith("maintenance_"):
        await handle_maintenance_type_selection(query, data.replace("maintenance_", ""))
    elif data == "cancel_location":
        await cancel_location_callback(update, context)
    elif data == "help":
        await show_help(query)

async def show_main_menu(query) -> None:
    """Muestra el men√∫ principal"""
    await query.edit_message_text(
        "üöê **Bot de Autocaravana**\n\n¬øQu√© quieres hacer?",
        reply_markup=get_main_menu_keyboard()
    )

async def show_daily_status_menu(query) -> None:
    """Muestra el men√∫ de estado diario"""
    await query.edit_message_text(
        "üìÖ **Registro Diario**\n\n¬øD√≥nde est√° la autocaravana hoy?",
        reply_markup=get_daily_status_keyboard()
    )

async def handle_status_selection(query, context, status: str) -> None:
    """Maneja la selecci√≥n de estado diario"""
    today = datetime.now().strftime('%Y-%m-%d')
    
    if status == 'travel':
        # Para viajes, usar el ConversationHandler de ubicaci√≥n
        await query.edit_message_text(
            "üöó **De viaje**\n\nEscribe la ubicaci√≥n donde te encuentras:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô Volver", callback_data="cancel_location")]
            ])
        )
        # Guardar el estado en el contexto para la conversaci√≥n
        context.user_data['waiting_for_location'] = True
        context.user_data['status_to_save'] = status
        return
    else:
        # Para otros estados, guardar directamente
        db.add_daily_record(today, status)
        status_name = STATUS_NAMES.get(status, status)
        emoji = STATUS_EMOJIS.get(status, "üìù")
        
        await query.edit_message_text(
            f"{emoji} **Registro guardado**\n\n"
            f"Fecha: {datetime.now().strftime('%d/%m/%Y')}\n"
            f"Estado: {status_name}\n\n"
            "‚úÖ Registro completado correctamente.",
            reply_markup=get_main_menu_keyboard()
        )

async def show_kilometers_menu(query) -> None:
    """Muestra el men√∫ de kilometraje"""
    total_km = db.get_total_kilometers()
    recent_records = db.get_odometer_records(limit=5)
    
    text = f"üõ£Ô∏è **Kilometraje**\n\n"
    text += f"üìä Total acumulado: **{total_km:,} km**\n\n".replace(',', '.')
    
    if recent_records:
        text += "üìã **√öltimos registros:**\n"
        for record in recent_records:
            date = datetime.strptime(record['date'], '%Y-%m-%d').strftime('%d/%m')
            odometer = record['kilometers']
            km_difference = record.get('km_difference', 0)
            
            if km_difference > 0:
                text += f"‚Ä¢ {date}: {odometer:,} km (+{km_difference:,} km)\n".replace(',', '.')
            else:
                text += f"‚Ä¢ {date}: {odometer:,} km\n".replace(',', '.')
    
    text += "\n¬øQu√© quieres hacer?"
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ûï Registrar KM", callback_data="add_kilometers")],
        [InlineKeyboardButton("üìã Ver todos", callback_data="list_kilometers")],
        [InlineKeyboardButton("üîô Volver", callback_data="main_menu")]
    ])
    
    await query.edit_message_text(text, reply_markup=keyboard)

async def show_maintenance_menu(query) -> None:
    """Muestra el men√∫ de mantenimiento"""
    total_cost = db.get_total_maintenance_cost()
    recent_records = db.get_maintenance_records(limit=5)
    
    text = f"üîß **Mantenimiento**\n\n"
    text += f"üí∞ Coste total: **{total_cost:,.2f} ‚Ç¨**\n\n"
    
    if recent_records:
        text += "üìã **√öltimos registros:**\n"
        for record in recent_records:
            date = datetime.strptime(record['date'], '%Y-%m-%d').strftime('%d/%m')
            type_name = MAINTENANCE_TYPES.get(record['type'], record['type'])
            cost_text = f" ({record['cost']}‚Ç¨)" if record['cost'] else ""
            text += f"‚Ä¢ {date}: {type_name}{cost_text}\n"
    
    text += "\n¬øQu√© quieres hacer?"
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ûï Registrar mantenimiento", callback_data="add_maintenance")],
        [InlineKeyboardButton("üìã Ver todos", callback_data="list_maintenance")],
        [InlineKeyboardButton("üîô Volver", callback_data="main_menu")]
    ])
    
    await query.edit_message_text(text, reply_markup=keyboard)

async def show_fuel_menu(query) -> None:
    """Muestra el men√∫ de repostajes"""
    total_cost = db.get_total_fuel_cost()
    recent_records = db.get_fuel_records(limit=5)
    
    text = f"‚õΩ **Repostajes**\n\n"
    text += f"üí∞ Coste total: **{total_cost:,.2f} ‚Ç¨**\n\n"
    
    if recent_records:
        text += "üìã **√öltimos registros:**\n"
        for record in recent_records:
            date = datetime.strptime(record['date'], '%Y-%m-%d').strftime('%d/%m')
            amount = record['amount']
            price = record['price_per_liter']
            liters = amount / price
            text += f"‚Ä¢ {date}: {amount:.2f}‚Ç¨ ({price:.3f}‚Ç¨/L) - {liters:.2f}L\n"
    
    text += "\n¬øQu√© quieres hacer?"
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ûï Registrar repostaje", callback_data="add_fuel")],
        [InlineKeyboardButton("üìã Ver todos", callback_data="list_fuel")],
        [InlineKeyboardButton("üîô Volver", callback_data="main_menu")]
    ])
    
    await query.edit_message_text(text, reply_markup=keyboard)

async def show_stats_menu(query) -> None:
    """Muestra el men√∫ de estad√≠sticas"""
    await query.edit_message_text(
        "üìä **Estad√≠sticas**\n\n¬øQu√© estad√≠sticas quieres ver?",
        reply_markup=get_stats_keyboard()
    )

async def handle_stats_selection(query, stat_type: str) -> None:
    """Maneja la selecci√≥n de tipo de estad√≠stica SOLO con listados"""
    if stat_type == "list_daily":
        await show_daily_records_list(query)
    elif stat_type == "list_km":
        await show_kilometers_list(query)
    elif stat_type == "list_maintenance":
        await show_maintenance_list(query)
    elif stat_type == "list_fuel":
        await show_fuel_list(query)

async def show_daily_records_list(query) -> None:
    """Muestra la lista de registros de ubicaci√≥n"""
    records = db.get_daily_records(limit=20)
    
    if not records:
        await query.edit_message_text(
            "üìç **Registros de Ubicaci√≥n**\n\nNo hay registros disponibles.",
            reply_markup=get_stats_keyboard()
        )
        return
    
    text = "üìç **Registros de Ubicaci√≥n**\n\n"
    
    for record in records:
        date = datetime.strptime(record['date'], '%Y-%m-%d').strftime('%d/%m/%Y')
        status = record['status']
        
        if status == 'travel':
            # Para viajes: fecha - "De viaje" - ubicaci√≥n introducida por el usuario
            if record['location_name']:
                if "," in record['location_name']:
                    # Si la ubicaci√≥n es GPS, mostrar coordenadas y enlace
                    latlon = record['location_name']
                    text += f"‚Ä¢ {date} - üöó De viaje - [Ver en mapa](https://maps.google.com/?q={latlon})\n"
                else:
                    # Si es texto normal, mostrar la ubicaci√≥n
                    text += f"‚Ä¢ {date} - üöó De viaje - {record['location_name']}\n"
            else:
                # Si no hay ubicaci√≥n registrada
                text += f"‚Ä¢ {date} - üöó De viaje - Sin ubicaci√≥n\n"
        elif status == 'parking':
            # Para parking: fecha - parking
            text += f"‚Ä¢ {date} - üÖøÔ∏è parking\n"
        elif status == 'vacation_home':
            # Para casa de vacaciones: fecha - Casa de vacaciones
            text += f"‚Ä¢ {date} - üè† Casa de vacaciones\n"
    
    # Dividir en m√∫ltiples mensajes si es muy largo
    if len(text) > 4000:
        parts = [text[i:i+4000] for i in range(0, len(text), 4000)]
        for i, part in enumerate(parts):
            if i == 0:
                await query.edit_message_text(part)
            else:
                await query.message.reply_text(part)
        
        await query.message.reply_text(
            "üìã Lista completada.",
            reply_markup=get_stats_keyboard()
        )
    else:
        await query.edit_message_text(
            text,
            reply_markup=get_stats_keyboard()
        )

async def show_kilometers_list(query) -> None:
    """Muestra la lista de registros de kilometraje"""
    records = db.get_odometer_records(limit=30)
    if not records:
        await query.edit_message_text(
            "üõ£Ô∏è **Registros de Kilometraje**\n\nNo hay registros disponibles.",
            reply_markup=get_stats_keyboard()
        )
        return
    
    text = "üõ£Ô∏è **Registros de Kilometraje**\n\n"
    total_km = 0
    
    for record in records:
        date = datetime.strptime(record['date'], '%Y-%m-%d').strftime('%d/%m/%Y')
        odometer = record['kilometers']
        km_difference = record.get('km_difference', 0)
        notes = record['notes'] or ""
        
        # Mostrar od√≥metro total y diferencia
        if km_difference > 0:
            text += f"‚Ä¢ {date} - {odometer:,} km (+{km_difference:,} km)".replace(',', '.')
        else:
            text += f"‚Ä¢ {date} - {odometer:,} km".replace(',', '.')
        
        if notes:
            text += f" ({notes})"
        text += "\n"
        
        total_km += km_difference
    
    # A√±adir l√≠nea separadora y total
    text += "\n" + "‚îÄ" * 40 + "\n"
    text += f"üõ£Ô∏è **Total de kil√≥metros recorridos: {total_km:,} km**".replace(',', '.')
    
    await query.edit_message_text(text, reply_markup=get_stats_keyboard())

async def show_maintenance_list(query) -> None:
    """Muestra la lista de registros de mantenimiento"""
    records = db.get_maintenance_records(limit=30)
    if not records:
        await query.edit_message_text(
            "üîß **Registros de Mantenimiento**\n\nNo hay registros disponibles.",
            reply_markup=get_stats_keyboard()
        )
        return
    
    text = "üîß **Registros de Mantenimiento**\n\n"
    total_cost = 0
    
    for record in records:
        date = datetime.strptime(record['date'], '%Y-%m-%d').strftime('%d/%m/%Y')
        desc = record['description']
        cost = record['cost'] or 0
        total_cost += cost
        
        # Formatear el coste para mostrar
        cost_display = f"{cost:.2f}‚Ç¨" if cost > 0 else "0.00‚Ç¨"
        
        text += f"‚Ä¢ {date} - {desc} - {cost_display}\n"
    
    # A√±adir l√≠nea separadora y sumatorio
    text += "\n" + "‚îÄ" * 40 + "\n"
    text += f"üí∞ **Total gastado en mantenimiento: {total_cost:.2f}‚Ç¨**"
    
    await query.edit_message_text(text, reply_markup=get_stats_keyboard())

async def show_fuel_list(query) -> None:
    """Muestra la lista de registros de repostajes"""
    records = db.get_fuel_records(limit=30)
    if not records:
        await query.edit_message_text(
            "‚õΩ **Registros de Repostajes**\n\nNo hay registros disponibles.",
            reply_markup=get_stats_keyboard()
        )
        return
    
    text = "‚õΩ **Registros de Repostajes**\n\n"
    total_cost = 0
    
    for record in records:
        date = datetime.strptime(record['date'], '%Y-%m-%d').strftime('%d/%m/%Y')
        amount = record['amount']
        price = record['price_per_liter']
        liters = amount / price
        total_cost += amount
        
        text += f"‚Ä¢ {date} - {amount:.2f}‚Ç¨ - {price:.3f}‚Ç¨/L ({liters:.2f}L)\n"
    
    # A√±adir l√≠nea separadora y sumatorio
    text += "\n" + "‚îÄ" * 40 + "\n"
    text += f"üí∞ **Total gastado en combustible: {total_cost:.2f}‚Ç¨**"
    
    await query.edit_message_text(text, reply_markup=get_stats_keyboard())

async def show_help(query) -> None:
    """Muestra la ayuda"""
    help_text = """
üìö **Ayuda del Bot de Autocaravana**

**Comandos disponibles:**
‚Ä¢ `/start` - Men√∫ principal
‚Ä¢ `/daily` - Registro manual del estado diario
‚Ä¢ `/km` - Registrar kilometraje
‚Ä¢ `/maintenance` - Registrar mantenimiento
‚Ä¢ `/stats` - Ver estad√≠sticas
‚Ä¢ `/help` - Esta ayuda

**Funcionalidades:**
‚Ä¢ üìÖ **Registro autom√°tico**: Todos los d√≠as a las 09:00 AM te preguntar√° d√≥nde est√° la autocaravana
‚Ä¢ üìä **Estad√≠sticas**: Gr√°ficos y listas de todos los registros
‚Ä¢ üõ£Ô∏è **Kilometraje**: Control del od√≥metro
‚Ä¢ üîß **Mantenimiento**: Registro de reparaciones y mejoras

**Estados de la autocaravana:**
‚Ä¢ üöó **De viaje** - Registra ubicaci√≥n GPS
‚Ä¢ üÖøÔ∏è **En parking** - Solo registra estado
‚Ä¢ üè† **Casa vacaciones** - Solo registra estado

¬øNecesitas ayuda con algo espec√≠fico?
"""
    
    await query.edit_message_text(
        help_text,
        reply_markup=get_main_menu_keyboard()
    )

# Handlers para conversaciones
async def handle_kilometers_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Maneja la entrada de kilometraje"""
    try:
        kilometers = int(update.message.text)
        if kilometers < 0:
            await update.message.reply_text("‚ùå El kilometraje no puede ser negativo. Int√©ntalo de nuevo:")
            return ASKING_KILOMETERS
        
        today = datetime.now().strftime('%Y-%m-%d')
        db.add_odometer_record(today, kilometers)
        
        await update.message.reply_text(
            f"‚úÖ **Kilometraje registrado**\n\n"
            f"Fecha: {datetime.now().strftime('%d/%m/%Y')}\n"
            f"Kil√≥metros: **{kilometers:,} km**\n\n"
            "Registro completado correctamente.".replace(',', '.'),
            reply_markup=get_main_menu_keyboard()
        )
        
        return ConversationHandler.END
        
    except ValueError:
        await update.message.reply_text("‚ùå Por favor, introduce un n√∫mero v√°lido:")
        return ASKING_KILOMETERS

async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Cancela cualquier conversaci√≥n"""
    await update.message.reply_text(
        "‚ùå Operaci√≥n cancelada.",
        reply_markup=get_main_menu_keyboard()
    )
    return ConversationHandler.END

# Funciones para mantenimiento
async def add_maintenance_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Callback para a√±adir mantenimiento desde el men√∫"""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        "üîß **Registro de Mantenimiento**\n\n¬øQu√© tipo de registro quieres a√±adir?",
        reply_markup=get_maintenance_type_keyboard()
    )
    return ASKING_MAINTENANCE_TYPE

async def handle_maintenance_type_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Maneja la selecci√≥n del tipo de mantenimiento"""
    query = update.callback_query
    await query.answer()
    
    maintenance_type = query.data.replace("maintenance_", "")
    context.user_data['maintenance_type'] = maintenance_type
    
    type_name = MAINTENANCE_TYPES.get(maintenance_type, maintenance_type)
    
    await query.edit_message_text(
        f"üîß **{type_name}**\n\n"
        f"Por favor, describe qu√© trabajo se realiz√≥:\n\n"
        f"Ejemplo: 'Cambio de aceite y filtro de aire'",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô Cancelar", callback_data="cancel_maintenance")
        ]])
    )
    
    return ASKING_MAINTENANCE_DESCRIPTION

async def handle_maintenance_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Maneja la entrada de la descripci√≥n del mantenimiento"""
    description = update.message.text.strip()
    
    if len(description) < 3:
        await update.message.reply_text(
            "‚ùå La descripci√≥n debe tener al menos 3 caracteres. Int√©ntalo de nuevo:"
        )
        return ASKING_MAINTENANCE_DESCRIPTION
    
    context.user_data['maintenance_description'] = description
    
    await update.message.reply_text(
        "üí∞ **Coste del mantenimiento**\n\n"
        "Por favor, introduce el coste en euros (solo n√∫meros):\n\n"
        "Ejemplo: 150.50\n"
        "Si no hay coste, escribe 0",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô Cancelar", callback_data="cancel_maintenance")
        ]])
    )
    
    return ASKING_MAINTENANCE_COST

async def handle_maintenance_cost(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Maneja la entrada del coste del mantenimiento"""
    try:
        cost_text = update.message.text.strip().replace(',', '.')
        cost = float(cost_text)
        
        if cost < 0:
            await update.message.reply_text("‚ùå El coste no puede ser negativo. Int√©ntalo de nuevo:")
            return ASKING_MAINTENANCE_COST
        
        # Guardar el registro
        today = datetime.now().strftime('%Y-%m-%d')
        maintenance_type = context.user_data.get('maintenance_type')
        description = context.user_data.get('maintenance_description')
        
        db.add_maintenance_record(today, maintenance_type, description, cost)
        
        # Limpiar datos temporales
        context.user_data.clear()
        
        type_name = MAINTENANCE_TYPES.get(maintenance_type, maintenance_type)
        cost_text = f" ({cost:.2f}‚Ç¨)" if cost > 0 else " (Sin coste)"
        
        await update.message.reply_text(
            f"‚úÖ **Mantenimiento registrado**\n\n"
            f"Fecha: {datetime.now().strftime('%d/%m/%Y')}\n"
            f"Tipo: {type_name}\n"
            f"Descripci√≥n: {description}\n"
            f"Coste: {cost_text}\n\n"
            "Registro completado correctamente.",
            reply_markup=get_main_menu_keyboard()
        )
        
        return ConversationHandler.END
        
    except ValueError:
        await update.message.reply_text("‚ùå Por favor, introduce un n√∫mero v√°lido:")
        return ASKING_MAINTENANCE_COST

async def cancel_maintenance_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Cancela la conversaci√≥n de mantenimiento"""
    query = update.callback_query
    await query.answer()
    
    # Limpiar datos temporales
    context.user_data.clear()
    
    await query.edit_message_text(
        "‚ùå Registro de mantenimiento cancelado.",
        reply_markup=get_main_menu_keyboard()
    )
    
    return ConversationHandler.END

# Funciones para registro de ubicaci√≥n
async def add_location_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Callback para a√±adir ubicaci√≥n desde el men√∫ de viaje"""
    query = update.callback_query
    await query.answer()
    
    # Guardar que estamos en estado de viaje
    context.user_data['travel_status'] = True
    
    await query.edit_message_text(
        "üìç **Registrar Ubicaci√≥n**\n\n"
        "Por favor, escribe tu ubicaci√≥n actual:\n\n"
        "Ejemplo: 'Madrid, Espa√±a' o 'Camping Los Pinos, Valencia'",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô Volver", callback_data="cancel_location")
        ]])
    )
    
    return ASKING_LOCATION

async def handle_location_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Maneja la entrada de la ubicaci√≥n"""
    # Verificar si estamos esperando ubicaci√≥n desde el men√∫ de estado diario
    if context.user_data.get('waiting_for_location'):
        location = update.message.text.strip()
        
        if len(location) < 3:
            await update.message.reply_text(
                "‚ùå La ubicaci√≥n debe tener al menos 3 caracteres. Int√©ntalo de nuevo:"
            )
            return ASKING_LOCATION
        
        # Guardar el registro con ubicaci√≥n
        today = datetime.now().strftime('%Y-%m-%d')
        status = context.user_data.get('status_to_save', 'travel')
        db.add_daily_record(today, status, location_name=location)
        
        # Limpiar datos temporales
        context.user_data.clear()
        
        await update.message.reply_text(
            f"‚úÖ **Registro guardado**\n\n"
            f"Fecha: {datetime.now().strftime('%d/%m/%Y')}\n"
            f"Estado: De viaje\n"
            f"Ubicaci√≥n: {location}\n\n"
            "‚úÖ Registro completado correctamente.",
            reply_markup=get_main_menu_keyboard()
        )
        
        return ConversationHandler.END
    
    # Si no estamos esperando ubicaci√≥n, ignorar el mensaje
    return ConversationHandler.END

async def cancel_location_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Cancela el registro de ubicaci√≥n"""
    query = update.callback_query
    await query.answer()
    
    # Limpiar datos temporales
    context.user_data.clear()
    
    await query.edit_message_text(
        "‚ùå Registro de ubicaci√≥n cancelado.",
        reply_markup=get_main_menu_keyboard()
    )
    
    return ConversationHandler.END 

# Nuevo handler para mensajes de ubicaci√≥n GPS
async def handle_gps_location(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Maneja la ubicaci√≥n GPS enviada por el usuario"""
    if update.message.location:
        lat = update.message.location.latitude
        lon = update.message.location.longitude
        today = datetime.now().strftime('%Y-%m-%d')
        # Guardar como texto "lat,lon"
        db.add_daily_record(today, 'travel', location_name=f"{lat},{lon}")
        await update.message.reply_text(
            f"‚úÖ **Ubicaci√≥n registrada**\n\n"
            f"Fecha: {datetime.now().strftime('%d/%m/%Y')}\n"
            f"Estado: De viaje\n"
            f"Ubicaci√≥n: [Ver en mapa](https://maps.google.com/?q={lat},{lon})\n\n"
            "‚úÖ Registro completado correctamente.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    else:
        await update.message.reply_text(
            "‚ùå No se recibi√≥ la ubicaci√≥n. Pulsa el bot√≥n para enviar tu ubicaci√≥n GPS.",
            reply_markup=ReplyKeyboardMarkup(
                [[KeyboardButton("üìç Enviar ubicaci√≥n GPS", request_location=True)]],
                one_time_keyboard=True,
                resize_keyboard=True
            )
        )
        return ASKING_LOCATION 

# Funciones para manejar repostajes
async def add_fuel_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Callback para a√±adir repostaje desde el men√∫"""
    # Determinar si es un comando o un callback
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(
            "‚õΩ **Registrar Repostaje**\n\nPor favor, introduce el importe del repostaje en euros:"
        )
    else:
        await update.message.reply_text(
            "‚õΩ **Registrar Repostaje**\n\nPor favor, introduce el importe del repostaje en euros:"
        )
    return ASKING_FUEL_AMOUNT

async def handle_fuel_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Maneja la entrada del importe del repostaje"""
    try:
        amount = float(update.message.text.replace(',', '.'))
        if amount <= 0:
            await update.message.reply_text(
                "‚ùå El importe debe ser mayor que 0. Int√©ntalo de nuevo:"
            )
            return ASKING_FUEL_AMOUNT
        
        context.user_data['fuel_amount'] = amount
        
        await update.message.reply_text(
            f"‚úÖ Importe registrado: **{amount:.2f}‚Ç¨**\n\n"
            "Ahora introduce el precio por litro en euros:"
        )
        return ASKING_FUEL_PRICE
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå Por favor, introduce un n√∫mero v√°lido. Int√©ntalo de nuevo:"
        )
        return ASKING_FUEL_AMOUNT

async def handle_fuel_price(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Maneja la entrada del precio por litro"""
    try:
        price = float(update.message.text.replace(',', '.'))
        if price <= 0:
            await update.message.reply_text(
                "‚ùå El precio debe ser mayor que 0. Int√©ntalo de nuevo:"
            )
            return ASKING_FUEL_PRICE
        
        amount = context.user_data.get('fuel_amount', 0)
        liters = amount / price
        
        # Guardar el registro
        today = datetime.now().strftime('%Y-%m-%d')
        db.add_fuel_record(today, amount, price)
        
        # Limpiar datos temporales
        context.user_data.clear()
        
        await update.message.reply_text(
            f"‚úÖ **Repostaje registrado**\n\n"
            f"Fecha: {datetime.now().strftime('%d/%m/%Y')}\n"
            f"Importe del repostaje: {amount:.2f}‚Ç¨\n"
            f"Precio por litro: {price:.3f}‚Ç¨/L\n"
            f"Litros repostados: {liters:.2f}L\n\n"
            "‚úÖ Repostaje completado correctamente.",
            reply_markup=get_main_menu_keyboard()
        )
        
        return ConversationHandler.END
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå Por favor, introduce un n√∫mero v√°lido. Int√©ntalo de nuevo:"
        )
        return ASKING_FUEL_PRICE

async def cancel_fuel_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Cancela la conversaci√≥n de repostaje"""
    context.user_data.clear()
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        "‚ùå Registro de repostaje cancelado.",
        reply_markup=get_main_menu_keyboard()
    )
    return ConversationHandler.END 